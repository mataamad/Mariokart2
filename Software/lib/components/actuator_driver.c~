#include "actuator_driver.h"
#include <boards/mariokartv1/board.h>
#include <peripherals/pio/pio.h>
#include <peripherals/pio/pio_it.h>
#include <peripherals/pwmc/pwmc.h>
#include <peripherals/aic/aic.h>

#include <stdlib.h>
#include <stdio.h>

#include <board.h>
#include <at91sam7xc256/AT91SAM7XC256.h>

//defining actuator pins (note for linar actuator clockwise == extending
//  anticlockwise == retracting)
#define ACT_DRIVER_CHANNEL_CLOCKWISE   0
#define ACT_DRIVER_CHANNEL_ANTICLOCKWISE   1

//Period of PWM  - aparently above a maximum value driver won't behave correctly, above around 0x3000 problems start
#define FULL_DUTY_PERIOD (0x01C0)
#define MAX_DUTY_PERIOD (FULL_DUTY_PERIOD - 0xF) /*aparently the motor driver shouldn't be driven at absolute full duty cycle*/
#define MIN_DUTY_PERIOD (0x00)


//Specify pin locations
const Pin act_driver_otw = ACT_DRIVER_OTW;
const Pin act_driver_fault = ACT_DRIVER_FAULT;
const Pin act_driver_reset1 = ACT_DRIVER_RESET1;
const Pin act_driver_reset2 = ACT_DRIVER_RESET2;


// Pio pins to configure.
static const Pin act_driver_pins[] = {ACT_DRIVER_PWM_CLOCKWISE,
    ACT_DRIVER_PWM_ANTICLOCKWISE,
    ACT_DRIVER_OTW,
    ACT_DRIVER_FAULT,
    ACT_DRIVER_RESET1,
    ACT_DRIVER_RESET2};



// Wait time in us - provided so that you can ensure pwm has been enabled/disabled.
// just blocks for a whole lot of cycles
void act_driver_WaitTimeInUs(unsigned int time_us) {
    register unsigned int i = 0;
    i = (BOARD_MCK / 1000000) * time_us;
    i = i / 3;
    while (i--);
}

//matt 04/2012 TODO: I haven't looked at this, it looks shifty.  I don't trust it.
//Interrupt occurs to indicate something has gone badly with the motor driver
//indicates that a short/ loss of power / overheating has caused the loss of
//control of either the brakes or steering
void ACT_DRIVER_ERROR( const Pin *pin ) {
    /*Overtemperature warning and (overtemperature shut down or overcurrent
    shut down or undervoltage protection) occurred*/
    if ((PIO_Get(&act_driver_otw) == 0) && (PIO_Get(&act_driver_fault) == 0)) {

        //attemmpt to solve problem by reseting driver
        PIO_Clear(&act_driver_reset1);
        PIO_Clear(&act_driver_reset2);

        //pauses
        act_driver_WaitTimeInUs(20);

        //release reset buttons
        PIO_Set(&act_driver_reset1);
        PIO_Set(&act_driver_reset2);

    }

    //Overcurrent shut-down or GVDD undervoltage protection occurred
    else if ((PIO_Get(&act_driver_otw) == 1) && (PIO_Get(&act_driver_fault) == 0)) {

        //attemmpt to solve problem by reseting driver
        PIO_Clear(&act_driver_reset1);
        PIO_Clear(&act_driver_reset2);

        //pauses
        act_driver_WaitTimeInUs(20);

        //release reset buttons
        PIO_Set(&act_driver_reset1);
        PIO_Set(&act_driver_reset2);
    }

    //Overtemperature warning
    else if ((PIO_Get(&act_driver_otw) == 0) && (PIO_Get(&act_driver_fault) == 1)) {
        /*TODO probably send a shutdown message to everything*/
    }
}

//mat 04/2012: TODO: does this work?
//pid controller
int act_driver_pid(int desired, int current) {

    static int err = 0;
    static int err_old = 0;
    static int I_err;

    int P_err;
    int D_err;

    err_old = err;
    err = desired - current;

    P_err = err;
    I_err += err;
    D_err = err - err_old;

    return ACT_DRIVER_P_GAIN * P_err + ACT_DRIVER_I_GAIN * I_err + ACT_DRIVER_D_GAIN*D_err;
}

/*internal function to set the period (in cycles) of the pwm*/
void set_pwm_duty_period(int pwm_channel, unsigned short period) {
    period = (period <= MAX_DUTY_PERIOD) ? period : MAX_DUTY_PERIOD;
    period = (period >= MIN_DUTY_PERIOD) ? period : MIN_DUTY_PERIOD;
    AT91C_BASE_PWMC->PWMC_CH[pwm_channel].PWMC_CDTYR = period;
}

/*internal function to set the the duty cycle of the pwm to a certain percent for a given channel*/
void set_pwm_duty_percent(int pwm_channel, unsigned short percent) {
    set_pwm_duty_period(pwm_channel, (percent*FULL_DUTY_PERIOD)/100);
}



//Sets up PWM output
void act_driver_init(void) {

    //sets up driver pins
    PIO_Configure(act_driver_pins, PIO_LISTSIZE(act_driver_pins));

    //activate actuator driver
    PIO_Set(&act_driver_reset1);
    PIO_Set(&act_driver_reset2);

    // Initialize interrupts
    PIO_ConfigureIt(&act_driver_otw,  ACT_DRIVER_ERROR);
    PIO_ConfigureIt(&act_driver_fault, ACT_DRIVER_ERROR);
    PIO_EnableIt(&act_driver_otw);
    PIO_EnableIt(&act_driver_fault);


    // Enable PWMC peripheral clock
    AT91C_BASE_PMC->PMC_PCER = 1 << AT91C_ID_PWMC; // Power up PWM Controller. 

    AT91C_BASE_PWMC->PWMC_DIS = AT91C_PWMC_CHID0; //disable channel 0 - ACT_DRIVER_CHANNEL_CLOCKWISE
    AT91C_BASE_PWMC->PWMC_DIS = AT91C_PWMC_CHID1; //disable channel 1 - ACT_DRIVER_CHANNEL_ANTICLOCKWISE

    AT91C_BASE_PWMC->PWMC_MR = 0; // Clear mode register.


    AT91C_BASE_PWMC->PWMC_CH[0].PWMC_CMR = 0x00 | AT91C_PWMC_CPOL; // use board frequency and polarity 0.
    AT91C_BASE_PWMC->PWMC_CH[0].PWMC_CPRDR = FULL_DUTY_PERIOD; //set the period
    set_pwm_duty_percent(/*channel*/ACT_DRIVER_CHANNEL_CLOCKWISE,0);


    AT91C_BASE_PWMC->PWMC_CH[1].PWMC_CMR = 0x00 | AT91C_PWMC_CPOL; // MCK and polarity 0.
    AT91C_BASE_PWMC->PWMC_CH[1].PWMC_CPRDR = FULL_DUTY_PERIOD; //set the period
    set_pwm_duty_percent(/*channel*/ACT_DRIVER_CHANNEL_ANTICLOCKWISE,0);


    AT91C_BASE_PWMC->PWMC_ENA = AT91C_PWMC_CHID0; // Enable channel 0.
    AT91C_BASE_PWMC->PWMC_ENA = AT91C_PWMC_CHID1; // Enable channel 1
}


/*
drive the actuator at a percentage duty cycle; use negative numbers for reverse direction
The steering actuator overcurrents power supplies at 50% duty cycle, and the brake actuator
claimed that it should not be driven over 25% duty cycle in its spec sheet
*/
void act_driver_drive(int percent) {
    if (percent > 0) {
        set_pwm_duty_percent(ACT_DRIVER_CHANNEL_CLOCKWISE,percent);
        set_pwm_duty_percent(ACT_DRIVER_CHANNEL_ANTICLOCKWISE,0);
    } else {
        set_pwm_duty_percent(ACT_DRIVER_CHANNEL_ANTICLOCKWISE,-percent);
        set_pwm_duty_percent(ACT_DRIVER_CHANNEL_CLOCKWISE,0);
    }
}
